{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","todos","setTodos","_useState3","_useState4","todoEditing","setTodoEditing","useEffect","json","localStorage","getItem","loadedTodos","JSON","parse","length","stringify","setItem","react_default","a","createElement","id","onSubmit","e","preventDefault","todo","document","getElementById","value","newTodo","Date","getTime","text","trim","completed","toConsumableArray","concat","alert","type","map","key","className","checked","onChange","updatedTodos","toggleComplete","defaultValue","onClick","objectSpread","submitEdits","filter","deleteTodo","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.227f6613.chunk.js","sourcesContent":["import React, {useState,useEffect} from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n    const [todos, setTodos] = useState([]);\r\n    const [todoEditing, setTodoEditing] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const json = localStorage.getItem(\"todos\");\r\n        const loadedTodos = JSON.parse(json);\r\n        if (loadedTodos) {\r\n          setTodos(loadedTodos);\r\n        }\r\n      }, []);\r\n    \r\n    useEffect(() => {\r\n        if(todos.length > 0) {\r\n            const json = JSON.stringify(todos);\r\n            localStorage.setItem(\"todos\", json);\r\n        }\r\n      }, [todos]);\r\n\r\n    // Add the handlesubmit code here\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        let todo = document.getElementById('todoAdd').value\r\n        const newTodo = {\r\n            id: new Date().getTime(),\r\n            text: todo.trim(),\r\n            completed: false,\r\n        };\r\n        if (newTodo.text.length > 0) {\r\n            setTodos([...todos].concat(newTodo));\r\n        } else {\r\n            alert(\"Enter Valid Task\");\r\n        }\r\n        document.getElementById('todoAdd').value = \"\"\r\n    }\r\n\r\n    // Add the deleteToDo code here\r\n    function deleteTodo(id) {\r\n        let updatedTodos = [...todos].filter((todo) => todo.id !== id);\r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    // Add the toggleComplete code here\r\n    function toggleComplete(id) {\r\n        let updatedTodos = [...todos].map((todo) => {\r\n            if (todo.id === id) {\r\n                todo.completed = !todo.completed;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    // Add the submitEdits code here\r\n    function submitEdits(newTodo) {\r\n        const updatedTodos = todos.map((todo) => {\r\n            if (todo.id === newTodo.id) {\r\n                return {\r\n                    ...todo,\r\n                    text: document.getElementById(newTodo.id).value,\r\n                };\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n        setTodoEditing(null);\r\n    }\r\n\r\n    return (\r\n        <div id=\"todo-list\">\r\n            <h1>Todo List</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    id='todoAdd'\r\n                />\r\n                <button type=\"submit\">Add Todo</button>\r\n            </form>\r\n            {todos.map((todo) => (\r\n\r\n                <div key={todo.id} className=\"todo\">\r\n                    <div className=\"todo-text\">\r\n                        {/* Add checkbox for toggle complete */}\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"completed\"\r\n                            checked={todo.completed}\r\n                            onChange={() => toggleComplete(todo.id)}\r\n                        />\r\n                        {/* if it is edit mode, display input box, else display text */}\r\n                        {todo.id === todoEditing ?\r\n                            (<input\r\n                                type=\"text\"\r\n                                id={todo.id}\r\n                                defaultValue={todo.text}\r\n                            />) :\r\n                            (<div>{todo.text}</div>)\r\n                        }\r\n                    </div>\r\n                    <div className=\"todo-actions\">\r\n                        {/* if it is edit mode, allow submit edit, else allow edit */}\r\n                        {todo.id === todoEditing ?\r\n                            (\r\n                                <button onClick={() => submitEdits(todo)}>Submit Edits</button>\r\n                            ) :\r\n                            (\r\n                                <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\r\n                            )}\r\n\r\n                        <button onClick={() => deleteTodo(todo.id)}>Delete</button>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}